calcolo hasEnergyRequestOrProvided in Config01

Load(?load) ^  ic-data:TimeSeries(?Load-Measurement) ^ measuresProperty(?load, ?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ LoadMeasurement(?Load-Value) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ hasTimestamp(?Load-Value, ?load-dataTimestamp) ^

Generator(?generator) ^ ic-data:TimeSeries(?Generator-Measurement) ^  measuresProperty(?generator, ?Generator-Measurement) ^ ic-data:hasDataPoint(?Generator-Measurement, ?Generator-Value) ^ GeneratorMeasurement(?Generator-Value) ^ hasValueEnergyProduced(?Generator-Value, ?Generator-ValueEnergyProduced) ^ hasTimestamp(?Generator-Value, ?load-dataTimestamp) ^

prosumer:M2(?meterM2) ^ ic-data:TimeSeries(?M2-Measurement) ^ measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ EnergyMeterMeasurement(?M2-Value) ^ hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

Config01(?prosumer) ^
composedBy(?prosumer, ?meterM2) ^ composedBy(?prosumer, ?load) ^ composedBy(?prosumer, ?generator) ^

swrlb:add(?result, ?Generator-ValueEnergyProduced, ?Load-ValueEnergyAbsorbed)

->
hasEnergyRequestOrProvided(?M2-Value, ?result)

--------------------------------------------------------------------------------------------------------------

calcolo M2 in Config01 con 
ALPHA < 0 (mi serve più energia di quella fornita dal generatore)
&&
ALPHA < battMaxDischarging (posso assorbire tutta l'energia in eccesso con la batteria)

Load(?load) ^  ic-data:TimeSeries(?Load-Measurement) ^ measuresProperty(?load, ?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ LoadMeasurement(?Load-Value) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ hasTimestamp(?Load-Value, ?load-dataTimestamp) ^

prosumer:M2(?meterM2) ^ ic-data:TimeSeries(?M2-Measurement) ^ measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

StorageSystem(?ss) ^ consistsOf(?ss, ?bat) ^ hasMaxDischargingPower(?bat, ?batMaxDischargValue) ^

Config01(?prosumer) ^ 
composedBy(?prosumer, ?meterM2) ^ composedBy(?prosumer, ?load) ^ composedBy(?prosumer, ?ss) ^

swrlb:lessThan(?alphaValue, 0) ^
swrlb:abs(?absAlphaValue, ?alphaValue) ^
swrlb:lessThan(?absAlphaValue, ?batMaxDischargValue) ^
swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^

->
hasValueEnergyMeter(?M2-Value, ?absLoad-ValueEnergyAbsorbed) ^ canAbsorbOrEmit(?M2-Value, true)

--------------------------------------------------------------------------------------------------------------

calcolo M2 in Config01 con 
ALPHA < 0 (mi serve più energia di quella fornita dal generatore)
&&
ALPHA > battMaxDischarging (la batteria non può fornire tutta l'energia mancante)

Load(?load) ^  ic-data:TimeSeries(?Load-Measurement) ^ measuresProperty(?load, ?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ LoadMeasurement(?Load-Value) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ hasTimestamp(?Load-Value, ?load-dataTimestamp) ^

prosumer:M2(?meterM2) ^ ic-data:TimeSeries(?M2-Measurement) ^ measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

StorageSystem(?ss) ^ consistsOf(?ss, ?bat) ^ hasMaxDischargingPower(?bat, ?batMaxDischargValue) ^

Config01(?prosumer) ^ 
composedBy(?prosumer, ?meterM2) ^ composedBy(?prosumer, ?load) ^ composedBy(?prosumer, ?ss) ^

swrlb:lessThan(?alphaValue, 0) ^
swrlb:abs(?absAlphaValue, ?alphaValue) ^
swrlb:greaterThan(?absAlphaValue, ?batMaxDischargValue) ^

swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^
swrlb:add(?generatoreValue, ?absAlphaValue, ?absLoad-ValueEnergyAbsorbed) ^
swrlb:add(?result, ?generatoreValue, ?batMaxDischargValue)

->
hasValueEnergyMeter(?M2-Value, ?result) ^ canAbsorbOrEmit(?M2-Value, false)

--------------------------------------------------------------------------------------------------------------

calcolo M2 in Config01 con 
ALPHA >= 0 (generatore produce più energia di quella assorbita dal load)
&&
ALPHA <= battMaxCharging (posso assorbire tutta l'energia in eccesso con la batteria)

Load(?load) ^  ic-data:TimeSeries(?Load-Measurement) ^ measuresProperty(?load, ?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ LoadMeasurement(?Load-Value) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ hasTimestamp(?Load-Value, ?load-dataTimestamp) ^

prosumer:M2(?meterM2) ^ ic-data:TimeSeries(?M2-Measurement) ^ measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

StorageSystem(?ss) ^ consistsOf(?ss, ?bat) ^ hasMaxChargingPower(?bat, ?batMaxChargValue) ^

Config01(?prosumer) ^ 
composedBy(?prosumer, ?meterM2) ^ composedBy(?prosumer, ?load) ^ composedBy(?prosumer, ?ss) ^

swrlb:greaterThanOrEqual(?alphaValue, 0) ^
swrlb:lessThanOrEqual(?alphaValue, ?batMaxChargValue) ^
swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^

->
hasValueEnergyMeter(?M2-Value, ?absLoad-ValueEnergyAbsorbed) ^ canAbsorbOrEmit(?M2-Value, true)

--------------------------------------------------------------------------------------------------------------

calcolo M2 in Config01 con 
ALPHA > 0 (generatore produce più energia di quella assorbita dal load)
&&
ALPHA > battMaxCharging (non posso assorbire tutta l'energia in eccesso con la batteria, quella in più va su M2)

Load(?load) ^  ic-data:TimeSeries(?Load-Measurement) ^ measuresProperty(?load, ?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ LoadMeasurement(?Load-Value) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ hasTimestamp(?Load-Value, ?load-dataTimestamp) ^

prosumer:M2(?meterM2) ^ ic-data:TimeSeries(?M2-Measurement) ^ measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

StorageSystem(?ss) ^ consistsOf(?ss, ?bat) ^ hasMaxChargingPower(?bat, ?batMaxChargValue) ^

Config01(?prosumer) ^ 
composedBy(?prosumer, ?meterM2) ^ composedBy(?prosumer, ?load) ^ composedBy(?prosumer, ?ss) ^

swrlb:greaterThan(?alphaValue, 0) ^
swrlb:greaterThan(?alphaValue, ?batMaxChargValue) ^

swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^
swrlb:add(?generatoreValue, ?alphaValue, ?absLoad-ValueEnergyAbsorbed) ^
swrlb:subtract(?result, ?generatoreValue, ?batMaxChargValue)

->
hasValueEnergyMeter(?M2-Value, ?result) ^ canAbsorbOrEmit(?M2-Value, false)


======================================================================================================================================================

=================================================ANGELA's=================================================
NON SERVONO PIU 
{
// can absorb M2 per alpha>0 && alpha>battMaxCharging
prosumer:composedBy(?prosumer, ?ss) ^ 
prosumer:composedBy(?prosumer, ?load) ^
prosumer:composedBy(?prosumer, ?meterM2) ^ 
prosumer:M2(?meterM2) ^
prosumer:Load(?load) ^ 

kyrillos-es:StorageSystem(?ss) ^ saref:consistsOf(?ss, ?bat) ^ 
autogen0:measuresProperty(?bat, ?batterySOC) ^ 
hasSOC(?batterySOC, ?SOC) ^ 

autogen0:measuresProperty(?load, ?Load-Measurement) ^ 
LoadMeasurement(?Load-Value) ^ prosumer:Config01(?prosumer) ^ 

ic-data:TimeSeries(?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^

autogen0:measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ 
ic-data:TimeSeries(?M2-Measurement) ^
hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ saref:hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^ 
swrlb:add(?generatoreValue, ?alphaValue, ?absLoad-ValueEnergyAbsorbed) ^ 
swrlb:greaterThan(?alphaValue, 0) ^
swrlb:greaterThan(?alphaValue, ?batMaxChargValue) ^ 
hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^  

hasMaxChargingPower(?bat, ?batMaxChargValue) ^ 

kyrillos-es:hasMaximumStateOfCharge(?bat, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?bat, ?capacity)


swrlb:multiply(?maxCapacity, ?maxSOC, ?capacity) ^ swrlb:add(?shouldBe, ?SOC, ?alphaValue) ^ 
swrlb:lessThan(?batMaxChargValue, ?alphaValue) ^ swrlb:greaterThan(?shouldBe, ?maxCapacity) 

saref:hasTimestamp(?Load-Value, ?load-dataTimestamp) ^ 

swrlb:subtract(?result, ?generatoreValue, ?batMaxChargValue) 
  -> canAbsorb(?batterySOC, false) ^ hasValueEnergyMeter(?M2-Value, ?result)

  ------------------------------------------------------------------------------------

  // can absorb M2 per alpha>0 && alpha<battMaxCharging
prosumer:composedBy(?prosumer, ?ss) ^ 
prosumer:composedBy(?prosumer, ?load) ^
prosumer:composedBy(?prosumer, ?meterM2) ^ 

prosumer:M2(?meterM2) ^
prosumer:Load(?load) ^ 
kyrillos-es:StorageSystem(?ss) ^ saref:consistsOf(?ss, ?bat) ^ 
autogen0:measuresProperty(?bat, ?batterySOC) ^ 
hasSOC(?batterySOC, ?SOC) ^ 

autogen0:measuresProperty(?load, ?Load-Measurement) ^ 
LoadMeasurement(?Load-Value) ^ prosumer:Config01(?prosumer) ^ 

ic-data:TimeSeries(?Load-Measurement) ^ ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^

autogen0:measuresProperty(?meterM2, ?M2-Measurement) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ 
ic-data:TimeSeries(?M2-Measurement) ^
hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ saref:hasTimestamp(?M2-Value, ?load-dataTimestamp) ^

swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^ 
swrlb:add(?generatoreValue, ?alphaValue, ?absLoad-ValueEnergyAbsorbed) ^ 
swrlb:greaterThan(?alphaValue, 0) ^
swrlb:greaterThan(?alphaValue, ?batMaxChargValue) ^ 
hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^  

hasMaxChargingPower(?bat, ?batMaxChargValue) ^ 

kyrillos-es:hasMaximumStateOfCharge(?bat, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?bat, ?capacity)


swrlb:multiply(?maxCapacity, ?maxSOC, ?capacity) ^ swrlb:add(?shouldBe, ?SOC, ?alphaValue) ^ 
swrlb:greaterThanOrEqual(?batMaxChargValue, ?alphaValue) ^ swrlb:lessThanOrEqual(?shouldBe, ?maxCapacity) 

saref:hasTimestamp(?Load-Value, ?load-dataTimestamp) ^ 

swrlb:subtract(?result, ?generatoreValue, ?batMaxChargValue) 
  -> canAbsorb(?batterySOC, true) ^ hasValueEnergyMeter(?M2-Value, ?result)

  -----------------------------------------------------------------------------------

//can emit false M2 per alpha>0 && alpha>battMaxCharging

  prosumer:composedBy(?prosumer, ?ss) ^ prosumer:composedBy(?prosumer, ?meterM2) ^ 
  prosumer:composedBy(?prosumer, ?load) ^ prosumer:Load(?load) ^ prosumer:M2(?meterM2) ^ 
  autogen0:measuresProperty(?bat, ?batterySOC) ^ hasSOC(?batterySOC, ?SOC) ^ 

  kyrillos-es:StorageSystem(?ss) ^ saref:consistsOf(?ss, ?bat) ^ hasMaxDischargingPower(?bat, ?batMaxDischargValue) ^ 
  hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^ 

  autogen0:measuresProperty(?meterM2, ?M2-Measurement) ^ LoadMeasurement(?Load-Value) ^ prosumer:Config01(?prosumer) ^ 
  ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ ic-data:TimeSeries(?M2-Measurement) ^ 
  saref:hasTimestamp(?Load-Value, ?load-dataTimestamp) ^ saref:hasTimestamp(?M2-Value, ?load-dataTimestamp) ^ 
  ic-data:TimeSeries(?Load-Measurement) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ 
  swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^ swrlb:add(?generatorValue, ?alphaValue, ?absLoad-ValueEnergyAbsorbed) ^ 
  swrlb:add(?result, ?generatorValue, ?batMaxDischargValue) ^ swrlb:abs(?absalphaValue, ?alphaValue) ^ 
  autogen0:measuresProperty(?load, ?Load-Measurement) ^ swrlb:lessThan(?alphaValue, 0) ^ swrlb:greaterThan(?absalphaValue, ?batMaxDischargValue) ^ 
  kyrillos-es:hasMinimumStateOfCharge(?bat, ?minSOC) ^ kyrillos-es:hasStorageCapacity(?bat, ?capacity) ^ swrlb:multiply(?minCapacity, ?minSOC, ?capacity) ^
   swrlb:add(?shouldBe, ?SOC, ?alphaValue) ^ swrlb:lessThan(?batMaxDischargValue, ?alphaValue) ^ swrlb:greaterThan(?shouldBe, ?minCapacity) 
   
   -> canEmit(?batterySOC, false) ^ hasValueEnergyMeter(?M2-Value, ?result)

  ------------------------------------------------------------------------------------

  //can emit true M2 per alpha>0 && alpha<battMaxCharging

  prosumer:composedBy(?prosumer, ?ss) ^ prosumer:composedBy(?prosumer, ?meterM2) ^ 
  prosumer:composedBy(?prosumer, ?load) ^ prosumer:Load(?load) ^ prosumer:M2(?meterM2) ^
   autogen0:measuresProperty(?bat, ?batterySOC) ^ hasSOC(?batterySOC, ?SOC) ^ kyrillos-es:StorageSystem(?ss) ^
    saref:consistsOf(?ss, ?bat) ^ hasMaxDischargingPower(?bat, ?batMaxDischargValue) ^ 
    hasEnergyRequestOrProvided(?M2-Value, ?alphaValue) ^ ic-data:hasDataPoint(?M2-Measurement, ?M2-Value) ^
     autogen0:measuresProperty(?meterM2, ?M2-Measurement) ^ LoadMeasurement(?Load-Value) ^ prosumer:Config01(?prosumer) ^ 
     ic-data:hasDataPoint(?Load-Measurement, ?Load-Value) ^ ic-data:TimeSeries(?M2-Measurement) ^
      saref:hasTimestamp(?Load-Value, ?load-dataTimestamp) ^ saref:hasTimestamp(?M2-Value, ?load-dataTimestamp) ^ 
      ic-data:TimeSeries(?Load-Measurement) ^ hasValueEnergyAbsorbed(?Load-Value, ?Load-ValueEnergyAbsorbed) ^ 

      swrlb:abs(?absLoad-ValueEnergyAbsorbed, ?Load-ValueEnergyAbsorbed) ^ swrlb:add(?generatorValue, ?alphaValue, ?absLoad-ValueEnergyAbsorbed) ^ 

      swrlb:add(?result, ?generatorValue, ?batMaxDischargValue) ^ swrlb:abs(?absalphaValue, ?alphaValue) ^ 
      
      autogen0:measuresProperty(?load, ?Load-Measurement) ^ swrlb:lessThan(?alphaValue, 0) ^
       swrlb:greaterThan(?absalphaValue, ?batMaxDischargValue) ^ kyrillos-es:hasMinimumStateOfCharge(?bat, ?minSOC) ^ 
       kyrillos-es:hasStorageCapacity(?bat, ?capacity) ^ swrlb:multiply(?minCapacity, ?minSOC, ?capacity) ^ 
       swrlb:add(?shouldBe, ?SOC, ?alphaValue) ^ swrlb:greaterThanOrEqual(?batMaxDischargValue, ?alphaValue) ^
        swrlb:lessThanOrEqual(?shouldBe, ?minCapacity) 
        
        -> canEmit(?batterySOC, true) ^ hasValueEnergyMeter(?M2-Value, ?result)


}

==========================================================================================================================================
CALCOLO FLESSIBILITA by EDDIE


// Variabili disponibili
load = 10 //ho un valore per ogni timestamp (kw)
generatorEnergyProduction = 100 //ho un valore per ogni timestamp (kw)
battMaxStateOfCharge = 0.9 //ho un valore per batteria
battMinStateOfCharge = 0.1 //ho un valore per batteria
battCapacity = 100 //ho un valore per batteria. Capacità totale (kw)
battMaxChargingPower = 60 //ho un valore per batteria (kw)
battMaxDishargingPower = 50 //ho un valore per batteria (kw)
Battery-Value = 90 //ho un valore per batteria, sarebbe da avere per ogni timestamp. Livello di carica attuale (kw)

// Variabili da calcolare
battMaxSOCValue = battCapacity * battMaxStateOfCharge = 90 // livello Massimo di carica possibile per la batteria (kw)
battMinSOCValue = battCapacity * battMinStateOfCharge = 10 // livello Minimo di carica possibile per la batteria (kw)
battChargingCapacity = battMaxSOCValue - Battery-Value = 0 //kw che può assorbire per riempirsi
battDischargingCapacity = Battery-Value - battMinSOCValue = 80 //kw che può fornire per svuotarsi
--> hasBatteryChargeableEnergy = min(battMaxChargingPower, battChargingCapacity) = 0 //kw che può REALMENTE assorbire al momento
--> hasBatteryDischargeableEnergy = min(battMaxDishargingPower, battDischargingCapacity) = 50 //kw che può REALMENTE fornire al momento
		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/**

prosumer:composedBy(?prosumer, ?load) ^
prosumer:composedBy(?prosumer, ?generator) ^ 

prosumer:Load(?load) ^ measuresProperty(?load, ?loadMes) ^ ic-data:hasDataPoint(?loadMes, ?Load-Measurement) ^ LoadMeasurement(?Load-Measurement) ^ 
 hasValueEnergyAbsorbed(?Load-Measurement, ?Load-Value) ^ saref:hasTimestamp(?Load-Measurement, ?dataTimestamp) ^ 

prosumer:Generator(?generator) ^ measuresProperty(?generator, ?genMes) ^ ic-data:hasDataPoint(?genMes, ?Generator-Measurement) ^ GeneratorMeasurement(?Generator-Measurement)
 hasValueEnergyProduced(?Generator-Measurement, ?Generator-Value) ^ saref:hasTimestamp(?Generator-Measurement, ?dataTimestamp) ^ 

**/


//ic-data:TimeSeries(?Load-Measurement) ^

//battMaxChargingPower <= battChargingCapacity //vuol dire che può caricare x
//battMaxDishargingPower <= battDischargingCapacity 

prosumer:composedBy(?prosumer, ?ss) ^ 

kyrillos-es:StorageSystem(?ss) ^ 
 saref:consistsOf(?ss, ?battery) ^ measuresProperty(?battery, ?batterySOC) ^ relatesToMeasurement(?batterySOC, ?Battery-Measurement) ^ StateOfChargeMeasurement(?Battery-Measurement) ^
 hasValue(?Battery-Measurement, ?Battery-Value) ^ saref:hasTimestamp(?Battery-Measurement, ?dataTimestamp) ^ 

kyrillos-es:hasMaximumStateOfCharge(?battery, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?battery, ?capacity) ^ kyrillos-es:hasMinimumStateOfCharge(?battery, ?minSOC) ^
hasMaxChargingPower(?battery, ?battMaxChargingPower) ^ hasMaxDischargingPower(?battery, ?battMaxDishargingPower) ^

swrlb:multiply(?battMaxSOCValue, ?maxSOC, ?capacity) ^ swrlb:multiply(?battMinSOCValue, ?minSOC, ?capacity) ^ 

swrlb:subtract(?battChargingCapacity, ?battMaxSOCValue, ?Battery-Value) ^ swrlb:subtract(?battDischargingCapacity, ?Battery-Value, ?battMinSOCValue) ^ 

swrlb:lessThanOrEqual(?battMaxChargingPower, ?battChargingCapacity) ^
swrlb:lessThanOrEqual(?battMaxDishargingPower, ?battDischargingCapacity) 

-> hasBatteryChargeableEnergy(?Battery-Measurement, ?battMaxChargingPower) ^ hasBatteryDischargeableEnergy(?Battery-Measurement, ?battMaxDishargingPower)

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//battMaxChargingPower > battChargingCapacity
//battMaxDishargingPower > battDischargingCapacity

prosumer:composedBy(?prosumer, ?ss) ^ 
kyrillos-es:StorageSystem(?ss) ^ 
 saref:consistsOf(?ss, ?battery) ^ measuresProperty(?battery, ?batterySOC) ^ relatesToMeasurement(?batterySOC, ?Battery-Measurement) ^ StateOfChargeMeasurement(?Battery-Measurement) ^
 hasValue(?Battery-Measurement, ?Battery-Value) ^ saref:hasTimestamp(?Battery-Measurement, ?dataTimestamp) ^ 

kyrillos-es:hasMaximumStateOfCharge(?battery, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?battery, ?capacity) ^ kyrillos-es:hasMinimumStateOfCharge(?battery, ?minSOC) ^
hasMaxChargingPower(?battery, ?battMaxChargingPower) ^ hasMaxDischargingPower(?battery, ?battMaxDishargingPower) ^

swrlb:multiply(?battMaxSOCValue, ?maxSOC, ?capacity) ^ swrlb:multiply(?battMinSOCValue, ?minSOC, ?capacity) ^ 

swrlb:subtract(?battChargingCapacity, ?battMaxSOCValue, ?Battery-Value) ^ swrlb:subtract(?battDischargingCapacity, ?Battery-Value, ?battMinSOCValue) ^ 

swrlb:greaterThan(?battMaxChargingPower, ?battChargingCapacity) ^
swrlb:greaterThan(?battMaxDishargingPower, ?battDischargingCapacity) 

-> hasBatteryChargeableEnergy(?Battery-Measurement, ?battChargingCapacity) ^ hasBatteryDischargeableEnergy(?Battery-Measurement, ?battDischargingCapacity)


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//battMaxChargingPower <= battChargingCapacity
//battMaxDishargingPower > battDischargingCapacity

prosumer:composedBy(?prosumer, ?ss) ^ 
kyrillos-es:StorageSystem(?ss) ^ 
 saref:consistsOf(?ss, ?battery) ^ measuresProperty(?battery, ?batterySOC) ^ relatesToMeasurement(?batterySOC, ?Battery-Measurement) ^ StateOfChargeMeasurement(?Battery-Measurement) ^
 hasValue(?Battery-Measurement, ?Battery-Value) ^ saref:hasTimestamp(?Battery-Measurement, ?dataTimestamp) ^ 

kyrillos-es:hasMaximumStateOfCharge(?battery, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?battery, ?capacity) ^ kyrillos-es:hasMinimumStateOfCharge(?battery, ?minSOC) ^
hasMaxChargingPower(?battery, ?battMaxChargingPower) ^ hasMaxDischargingPower(?battery, ?battMaxDishargingPower) ^

swrlb:multiply(?battMaxSOCValue, ?maxSOC, ?capacity) ^ swrlb:multiply(?battMinSOCValue, ?minSOC, ?capacity) ^ 

swrlb:subtract(?battChargingCapacity, ?battMaxSOCValue, ?Battery-Value) ^ swrlb:subtract(?battDischargingCapacity, ?Battery-Value, ?battMinSOCValue) ^ 

swrlb:lessThanOrEqual(?battMaxChargingPower, ?battChargingCapacity) ^
swrlb:greaterThan(?battMaxDishargingPower, ?battDischargingCapacity) 

-> hasBatteryChargeableEnergy(?Battery-Measurement, ?battMaxChargingPower) ^ hasBatteryDischargeableEnergy(?Battery-Measurement, ?battDischargingCapacity)


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//battMaxChargingPower > battChargingCapacity
//battMaxDishargingPower <= battDischargingCapacity

prosumer:composedBy(?prosumer, ?ss) ^ 
kyrillos-es:StorageSystem(?ss) ^ saref:consistsOf(?ss, ?battery) ^ 
 measuresProperty(?battery, ?batterySOC) ^ relatesToMeasurement(?batterySOC, ?Battery-Measurement) ^ StateOfChargeMeasurement(?Battery-Measurement) ^
 hasValue(?Battery-Measurement, ?Battery-Value) ^ saref:hasTimestamp(?Battery-Measurement, ?dataTimestamp) ^ 
hasMaxChargingPower(?battery, ?battMaxChargingPower) ^ hasMaxDischargingPower(?battery, ?battMaxDishargingPower) ^

kyrillos-es:hasMaximumStateOfCharge(?battery, ?maxSOC) ^ kyrillos-es:hasStorageCapacity(?battery, ?capacity) ^ kyrillos-es:hasMinimumStateOfCharge(?battery, ?minSOC) ^

swrlb:multiply(?battMaxSOCValue, ?maxSOC, ?capacity) ^ swrlb:multiply(?battMinSOCValue, ?minSOC, ?capacity) ^ 

swrlb:subtract(?battChargingCapacity, ?battMaxSOCValue, ?Battery-Value) ^ swrlb:subtract(?battDischargingCapacity, ?Battery-Value, ?battMinSOCValue) ^ 

swrlb:greaterThan(?battMaxChargingPower, ?battChargingCapacity) ^
swrlb:lessThanOrEqual(?battMaxDishargingPower, ?battDischargingCapacity) 

-> hasBatteryChargeableEnergy(?Battery-Measurement, ?battChargingCapacity) ^ hasBatteryDischargeableEnergy(?Battery-Measurement, ?battMaxDishargingPower)